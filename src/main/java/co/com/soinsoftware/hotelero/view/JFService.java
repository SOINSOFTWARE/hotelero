package co.com.soinsoftware.hotelero.view;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.IOException;
import java.util.Date;
import java.util.List;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;

import com.soinsoftware.hotelero.core.controller.ServiceController;
import com.soinsoftware.hotelero.core.controller.ServiceTypeController;
import com.soinsoftware.hotelero.persistence.entity.Service;
import com.soinsoftware.hotelero.persistence.entity.ServiceType;

import co.com.soinsoftware.hotelero.util.ServiceTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * @author Carlos Rodriguez
 * @since 17/07/2016
 * @version 1.0
 */
public class JFService extends JDialog {

	private static final long serialVersionUID = 372651084892210851L;

	private static final String MSG_SERVICE_REQUIRED = "Complete el campo nombre del servicio";

	private static final String MSG_SERVICE_TYPE_REQUIRED = "Seleccione el tipo de consumo";

	private ServiceController serviceController;

	private ServiceTypeController serviceTypeController;

	private List<ServiceType> serviceTypeList;

	public JFService() {
		try {
			this.serviceController = new ServiceController();
			serviceTypeController = new ServiceTypeController();
		} catch (final IOException e) {
			e.printStackTrace();
			ViewUtils.showConfirmDialog(this, ViewUtils.MSG_DATABASE_CONNECTION_ERROR, ViewUtils.TITLE_DATABASE_ERROR);
			System.exit(0);
		}
		this.initComponents();
		final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		this.setLocation((int) (screenSize.getWidth() / 2 - 350), (int) (screenSize.getHeight() / 2 - 350));
		this.setModal(true);
		this.setTextFieldLimits();
	}

	public void refresh() {
		this.jtfServiceName.setText("");
		this.jtfServiceValue.setText("0");
		this.setServiceTypeModel();
		this.refreshTableData();
	}

	private void setTextFieldLimits() {
		this.jtfServiceName.setDocument(new JTextFieldLimit(45));
	}

	private void setServiceTypeModel() {
		this.serviceTypeList = serviceTypeController.select();
		DefaultComboBoxModel<String> model = new DefaultComboBoxModel<String>();
		model.addElement("Seleccione uno...");
		for (final ServiceType serviceType : serviceTypeList) {
			model.addElement(serviceType.getName());
		}
		this.jcbServiceCategory.setModel(model);
	}

	private void refreshTableData() {
		final List<Service> serviceList = this.serviceController.select();
		final TableModel model = new ServiceTableModel(serviceList);
		this.jtbServiceList.setModel(model);
		this.jtbServiceList.setFillsViewportHeight(true);
	}

	private boolean validateDataForSave() {
		boolean valid = true;
		final String name = this.jtfServiceName.getText();
		if (this.jcbServiceCategory.getSelectedIndex() == 0) {
			valid = false;
			ViewUtils.showMessage(this, MSG_SERVICE_TYPE_REQUIRED, ViewUtils.TITLE_REQUIRED_FIELDS,
					JOptionPane.ERROR_MESSAGE);
		} else if (name.trim().equals("")) {
			valid = false;
			ViewUtils.showMessage(this, MSG_SERVICE_REQUIRED, ViewUtils.TITLE_REQUIRED_FIELDS,
					JOptionPane.ERROR_MESSAGE);
		}
		return valid;
	}

	private long getServiceValue() {
		final String valStr = this.jtfServiceValue.getText();
		return Long.parseLong(valStr.replace(".", "").replace(",", ""));
	}

	private List<Service> getServiceListFromTable() {
		final TableModel model = this.jtbServiceList.getModel();
		return ((ServiceTableModel) model).getServiceList();
	}

	private boolean hasServiceToBeUpdated(final List<Service> serviceList) {
		boolean hasElements = false;
		for (final Service service : serviceList) {
			if (service.getNewName() != null
					&& (!service.getNewName().equals("") && !service.getNewName().equals(service.getName()))
					|| (service.getNewValue() != service.getValue())) {
				hasElements = true;
				break;
			}
		}
		return hasElements;
	}

	private boolean hasServiceToBeDeleted(final List<Service> serviceList) {
		boolean hasElements = false;
		for (final Service service : serviceList) {
			if (service.isDelete()) {
				hasElements = true;
				break;
			}
		}
		return hasElements;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jpTitle = new javax.swing.JPanel();
		jlbTitle = new javax.swing.JLabel();
		lbImage = new javax.swing.JLabel();
		jpNewService = new javax.swing.JPanel();
		jlbServiceCategory = new javax.swing.JLabel();
		jcbServiceCategory = new javax.swing.JComboBox<String>();
		jlbServiceName = new javax.swing.JLabel();
		jtfServiceName = new javax.swing.JTextField();
		jlbServiceValue = new javax.swing.JLabel();
		jtfServiceValue = new javax.swing.JFormattedTextField();
		jbtSave = new javax.swing.JButton();
		jpServiceList = new javax.swing.JPanel();
		jpActionButtons = new javax.swing.JPanel();
		jbtUpdate = new javax.swing.JButton();
		jbtDelete = new javax.swing.JButton();
		jspServiceList = new javax.swing.JScrollPane();
		jtbServiceList = new javax.swing.JTable();
		jpAction = new javax.swing.JPanel();
		jbtClose = new javax.swing.JButton();

		setTitle("Hotelero");
		setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/melvic.png")));
		setResizable(false);

		jpTitle.setBackground(new java.awt.Color(255, 255, 255));

		jlbTitle.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
		jlbTitle.setText("Servicios");

		javax.swing.GroupLayout jpTitleLayout = new javax.swing.GroupLayout(jpTitle);
		jpTitle.setLayout(jpTitleLayout);
		jpTitleLayout.setHorizontalGroup(jpTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jpTitleLayout.createSequentialGroup().addContainerGap().addComponent(jlbTitle)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
		jpTitleLayout.setVerticalGroup(jpTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jpTitleLayout.createSequentialGroup().addGap(32, 32, 32).addComponent(jlbTitle)
						.addContainerGap(34, Short.MAX_VALUE)));

		lbImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/soin.png"))); // NOI18N

		jpNewService.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nuevo servicio",
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION,
				new java.awt.Font("Verdana", 1, 12))); // NOI18N

		jlbServiceCategory.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
		jlbServiceCategory.setText("Tipo de Consumo:");

		jcbServiceCategory.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N

		jlbServiceName.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
		jlbServiceName.setText("Servicio:");

		jtfServiceName.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N

		jlbServiceValue.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
		jlbServiceValue.setText("Valor:");

		jtfServiceValue.setBackground(new java.awt.Color(255, 255, 255));
		jtfServiceValue.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(
				new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0"))));
		jtfServiceValue.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N

		jbtSave.setBackground(new java.awt.Color(16, 135, 221));
		jbtSave.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
		jbtSave.setForeground(new java.awt.Color(255, 255, 255));
		jbtSave.setText("Guardar");
		jbtSave.setPreferredSize(new java.awt.Dimension(89, 23));
		jbtSave.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jbtSaveActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jpNewServiceLayout = new javax.swing.GroupLayout(jpNewService);
		jpNewService.setLayout(jpNewServiceLayout);
		jpNewServiceLayout
				.setHorizontalGroup(jpNewServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jpNewServiceLayout.createSequentialGroup().addContainerGap()
								.addGroup(jpNewServiceLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
										.addComponent(jlbServiceCategory)
										.addComponent(jcbServiceCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 130,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jlbServiceName).addComponent(jlbServiceValue)
										.addComponent(jtfServiceName, javax.swing.GroupLayout.DEFAULT_SIZE, 180,
												Short.MAX_VALUE)
										.addComponent(jtfServiceValue))
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpNewServiceLayout.createSequentialGroup()
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(jbtSave, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap()));
		jpNewServiceLayout.setVerticalGroup(jpNewServiceLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jpNewServiceLayout.createSequentialGroup().addContainerGap().addComponent(jlbServiceCategory)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jcbServiceCategory, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(jlbServiceName)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jtfServiceName, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(jlbServiceValue)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jtfServiceValue, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(18, 18, 18)
						.addComponent(jbtSave, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		jpServiceList.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Listado de servicios",
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION,
				new java.awt.Font("Verdana", 1, 12))); // NOI18N

		jpActionButtons.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

		jbtUpdate.setBackground(new java.awt.Color(16, 135, 221));
		jbtUpdate.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
		jbtUpdate.setForeground(new java.awt.Color(255, 255, 255));
		jbtUpdate.setText("Actualizar");
		jbtUpdate.setPreferredSize(new java.awt.Dimension(89, 23));
		jbtUpdate.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jbtUpdateActionPerformed(evt);
			}
		});

		jbtDelete.setBackground(new java.awt.Color(16, 135, 221));
		jbtDelete.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
		jbtDelete.setForeground(new java.awt.Color(255, 255, 255));
		jbtDelete.setText("Eliminar");
		jbtDelete.setPreferredSize(new java.awt.Dimension(89, 23));
		jbtDelete.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jbtDeleteActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jpActionButtonsLayout = new javax.swing.GroupLayout(jpActionButtons);
		jpActionButtons.setLayout(jpActionButtonsLayout);
		jpActionButtonsLayout.setHorizontalGroup(jpActionButtonsLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jpActionButtonsLayout.createSequentialGroup().addContainerGap()
						.addGroup(jpActionButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jbtUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 100,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jbtDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 100,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
		jpActionButtonsLayout
				.setVerticalGroup(jpActionButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jpActionButtonsLayout.createSequentialGroup().addContainerGap()
								.addComponent(jbtUpdate, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(jbtDelete, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap(120, Short.MAX_VALUE)));

		jspServiceList.setViewportView(jtbServiceList);
		if (jtbServiceList.getColumnModel().getColumnCount() > 0) {
			jtbServiceList.getColumnModel().getColumn(0).setResizable(false);
			jtbServiceList.getColumnModel().getColumn(1).setResizable(false);
			jtbServiceList.getColumnModel().getColumn(2).setResizable(false);
		}

		javax.swing.GroupLayout jpServiceListLayout = new javax.swing.GroupLayout(jpServiceList);
		jpServiceList.setLayout(jpServiceListLayout);
		jpServiceListLayout
				.setHorizontalGroup(jpServiceListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jpServiceListLayout.createSequentialGroup().addContainerGap()
								.addComponent(jspServiceList, javax.swing.GroupLayout.PREFERRED_SIZE, 320,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(jpActionButtons, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)));
		jpServiceListLayout.setVerticalGroup(jpServiceListLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jpServiceListLayout.createSequentialGroup().addGroup(jpServiceListLayout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
						.addComponent(jpActionButtons, javax.swing.GroupLayout.Alignment.LEADING,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE)
						.addComponent(jspServiceList, javax.swing.GroupLayout.Alignment.LEADING,
								javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		jpAction.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "",
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION,
				new java.awt.Font("Verdana", 0, 11))); // NOI18N

		jbtClose.setBackground(new java.awt.Color(16, 135, 221));
		jbtClose.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N
		jbtClose.setForeground(new java.awt.Color(255, 255, 255));
		jbtClose.setText("Cerrar");
		jbtClose.setPreferredSize(new java.awt.Dimension(89, 23));
		jbtClose.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jbtCloseActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jpActionLayout = new javax.swing.GroupLayout(jpAction);
		jpAction.setLayout(jpActionLayout);
		jpActionLayout
				.setHorizontalGroup(jpActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpActionLayout.createSequentialGroup()
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(jbtClose, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(22, 22, 22)));
		jpActionLayout.setVerticalGroup(jpActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jpActionLayout.createSequentialGroup().addGap(23, 23, 23)
						.addComponent(jbtClose, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(jpTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
						Short.MAX_VALUE)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup().addGap(0, 0, Short.MAX_VALUE).addComponent(lbImage,
								javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE))
				.addGroup(layout.createSequentialGroup().addContainerGap().addGroup(layout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addComponent(jpNewService, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jpServiceList, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(0, 0, Short.MAX_VALUE))
						.addComponent(jpAction, javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
						.addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
						.addComponent(jpTitle, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(11, 11, 11)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jpNewService, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jpServiceList, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jpAction, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
								javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(lbImage, javax.swing.GroupLayout.PREFERRED_SIZE, 35,
								javax.swing.GroupLayout.PREFERRED_SIZE)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void jbtCloseActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jbtCloseActionPerformed
		this.setVisible(false);
	}// GEN-LAST:event_jbtCloseActionPerformed

	private void jbtSaveActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jbtSaveActionPerformed
		if (this.validateDataForSave()) {
			final int confirmation = ViewUtils.showConfirmDialog(this, ViewUtils.MSG_SAVE_QUESTION,
					ViewUtils.TITLE_SAVED);
			if (confirmation == JOptionPane.OK_OPTION) {
				final int index = this.jcbServiceCategory.getSelectedIndex() - 1;
				final ServiceType serviceType = this.serviceTypeList.get(index);
				final String name = this.jtfServiceName.getText();
				final long value = this.getServiceValue();
				this.serviceController.save(serviceType, name, value);
				ViewUtils.showMessage(this, ViewUtils.MSG_SAVED, ViewUtils.TITLE_SAVED,
						JOptionPane.INFORMATION_MESSAGE);
				this.refresh();
			}
		}
	}// GEN-LAST:event_jbtSaveActionPerformed

	private void jbtUpdateActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jbtUpdateActionPerformed
		final List<Service> serviceList = this.getServiceListFromTable();
		if (serviceList != null && this.hasServiceToBeUpdated(serviceList)) {
			final int confirmation = ViewUtils.showConfirmDialog(this, ViewUtils.MSG_UPDATE_QUESTION,
					ViewUtils.TITLE_SAVED);
			if (confirmation == JOptionPane.OK_OPTION) {
				for (final Service service : serviceList) {
					boolean edited = false;
					if (service.getNewName() != null && !service.getNewName().equals("")
							&& !service.getNewName().equals(service.getName())) {
						edited = true;
						service.setName(service.getNewName());
					}
					if (service.getNewValue() != service.getValue()) {
						edited = true;
						service.setValue(service.getNewValue());
					}
					if (edited) {
						service.setUpdated(new Date());
						this.serviceController.save(service);
					}
				}
				ViewUtils.showMessage(this, ViewUtils.MSG_UPDATED, ViewUtils.TITLE_SAVED,
						JOptionPane.INFORMATION_MESSAGE);
				this.refresh();
			}
		} else {
			ViewUtils.showMessage(this, ViewUtils.MSG_UNEDITED, ViewUtils.TITLE_SAVED, JOptionPane.INFORMATION_MESSAGE);
		}
	}// GEN-LAST:event_jbtUpdateActionPerformed

	private void jbtDeleteActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jbtDeleteActionPerformed
		final List<Service> serviceList = this.getServiceListFromTable();
		if (serviceList != null && this.hasServiceToBeDeleted(serviceList)) {
			final int confirmation = ViewUtils.showConfirmDialog(this, ViewUtils.MSG_DELETE_QUESTION,
					ViewUtils.TITLE_SAVED);
			if (confirmation == JOptionPane.OK_OPTION) {
				for (final Service service : serviceList) {
					if (service.isDelete()) {
						service.setEnabled(false);
						service.setUpdated(new Date());
						this.serviceController.save(service);
					}
				}
				ViewUtils.showMessage(this, ViewUtils.MSG_DELETED, ViewUtils.TITLE_SAVED,
						JOptionPane.INFORMATION_MESSAGE);
				this.refresh();
			}
		} else {
			ViewUtils.showMessage(this, ViewUtils.MSG_UNSELECTED, ViewUtils.TITLE_SAVED,
					JOptionPane.INFORMATION_MESSAGE);
		}
	}// GEN-LAST:event_jbtDeleteActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jbtClose;
	private javax.swing.JButton jbtDelete;
	private javax.swing.JButton jbtSave;
	private javax.swing.JButton jbtUpdate;
	private javax.swing.JComboBox<String> jcbServiceCategory;
	private javax.swing.JLabel jlbServiceCategory;
	private javax.swing.JLabel jlbServiceName;
	private javax.swing.JLabel jlbServiceValue;
	private javax.swing.JLabel jlbTitle;
	private javax.swing.JPanel jpAction;
	private javax.swing.JPanel jpActionButtons;
	private javax.swing.JPanel jpNewService;
	private javax.swing.JPanel jpServiceList;
	private javax.swing.JPanel jpTitle;
	private javax.swing.JScrollPane jspServiceList;
	private javax.swing.JTable jtbServiceList;
	private javax.swing.JTextField jtfServiceName;
	private javax.swing.JFormattedTextField jtfServiceValue;
	private javax.swing.JLabel lbImage;
	// End of variables declaration//GEN-END:variables
}
